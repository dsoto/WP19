{"type":"settings","kernel":"python3","backend_state":"running","trust":true,"metadata":{"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.6.1"},"widgets":{"state":{},"version":"1.1.2"}},"kernel_state":"idle"}
{"output":{"0":{"text":"The autoreload extension is already loaded. To reload it, use:\n  %reload_ext autoreload\n","name":"stdout"}},"exec_count":10,"start":1502237735210,"input":"%load_ext autoreload","state":"done","pos":1,"cell_type":"code","type":"cell","end":1502237735252,"id":"bdc2c3","kernel":"python3"}
{"type":"file","last_load":1501528930625}
{"exec_count":13,"start":1502237888807,"input":"# write this out to disk\nfor rfd in wpa.raw_file_data:\n    vname = rfd['village_name']\n    diffed = resampled_data[vname]\n    diffed.to_csv(vname + '-resampled.csv')","state":"done","pos":4,"cell_type":"code","type":"cell","end":1502237891157,"id":"5cd768","kernel":"python3"}
{"type":"cell","id":"c06ed8","pos":0,"input":"# Introduction\n\nI developed a simple routine to insert zeros into a time series based on valid recorded power gap messages from the meter.\nThis allows a straightforward aggregation approach for getting daily energy use.\n\n# Method\n\n- perform zero insertion on energy data\n- sum minute energy use over 24 hour periods\n\nThis method does not attempt to correct or account for\n\n- periods with data loss (these will underreport)\n- increments in kWh export during data loss\n- days of complete or incomplete service\n\n# Results\n\nThis allows for more complete records than previous analyses.\n\n# Next Work","cell_type":"markdown"}
{"output":{"0":{"text":"ajau\n","name":"stdout"},"1":{"text":"asei\n","name":"stdout"},"2":{"text":"atamali\n","name":"stdout"},"3":{"text":"ayapo\n","name":"stdout"},"4":{"text":"kensio\n","name":"stdout"}},"exec_count":12,"start":1502237735761,"input":"resampled_data = {}\nfor rfd in wpa.raw_file_data:\n    vname = rfd['village_name']\n    print(vname)\n    energy_data = wpa.load_timeseries_file(vname + '-clean.csv')\n    messages = wpa.load_message_file(vname + '-messages.csv')\n    diffed = wpa_insert_power_gap_zeros(energy_data, messages)\n    #daily = diffed.groupby(diffed.index.date).sum()\n    resampled_data[vname] = diffed","state":"done","pos":3,"cell_type":"code","type":"cell","end":1502237888800,"id":"0d240f","kernel":"python3"}
{"output":{"0":{"data":{"text/html":"<div>\n<style>\n    .dataframe thead tr:only-child th {\n        text-align: right;\n    }\n\n    .dataframe thead th {\n        text-align: left;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>days observed</th>\n      <th>mean kWh per day per capita</th>\n      <th>mean kWh per day per household</th>\n      <th>median kWh per day per housheold</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>ajau</th>\n      <td>129.0</td>\n      <td>1.240470</td>\n      <td>4.961881</td>\n      <td>5.033058</td>\n    </tr>\n    <tr>\n      <th>asei</th>\n      <td>78.0</td>\n      <td>1.363928</td>\n      <td>5.455711</td>\n      <td>5.636364</td>\n    </tr>\n    <tr>\n      <th>atamali</th>\n      <td>110.0</td>\n      <td>0.094091</td>\n      <td>0.376364</td>\n      <td>0.400000</td>\n    </tr>\n    <tr>\n      <th>ayapo</th>\n      <td>117.0</td>\n      <td>0.206269</td>\n      <td>0.825077</td>\n      <td>0.922330</td>\n    </tr>\n    <tr>\n      <th>kensio</th>\n      <td>98.0</td>\n      <td>0.066454</td>\n      <td>0.265816</td>\n      <td>0.075000</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"exec_count":15}},"exec_count":15,"start":1502237893482,"input":"# create a table of summary statistics\ntmp_dict = {}\nfor rfd in wpa.raw_file_data:\n    vname = rfd['village_name']\n    connections = rfd['connections']\n    persons_per_household = rfd['persons_per_household']\n    diffed = resampled_data[vname]\n    daily = diffed.groupby(diffed.index.date).sum()\n    #print(vname, daily.mean(), daily.median())\n    tmp_dict[vname] = {'mean kWh per day per household':daily.mean()/connections,\n                       'median kWh per day per housheold':daily.median()/connections,\n                       'mean kWh per day per capita':daily.mean()/connections/persons_per_household,\n                       'days observed':daily.count()}\ndaily_stats = pd.DataFrame(tmp_dict).T\ndaily_stats","state":"done","pos":6,"cell_type":"code","type":"cell","end":1502237895778,"id":"7cc112","kernel":"python3"}
{"exec_count":11,"start":1502237735722,"input":"%autoreload 2\n%matplotlib inline\n\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport WP19_analysis as wpa\n#import tabulate\n\ndef wpa_insert_power_gap_zeros(energy_data, messages):\n    # this puts zeros in the recorded power gaps and leaves data gaps untouched\n    power_down = messages[messages['message']=='Power Down'].index.values\n    power_up = messages[messages['message']=='Power Up'].index.values\n    # this is diffing all columns and possibly slowing down function\n    diffed = energy_data[['kWh export']].resample('1T').asfreq().diff().shift(-1)\n    for i in diffed.index.values:\n        # if either boundary of the interval is in a power gap, we want to insert a zero\n        # if the insertion point of the index is one greater for the power_down time, you are in a gap\n        if np.searchsorted(power_down, i) == np.searchsorted(power_up, i) + 1:\n            diffed.loc[i]['kWh export'] = 0\n        end_interval = i + np.timedelta64(1,'m')\n        if np.searchsorted(power_down, end_interval) == np.searchsorted(power_up, end_interval) + 1:\n            diffed.loc[i]['kWh export'] = 0\n    return diffed['kWh export']","state":"done","pos":2,"cell_type":"code","type":"cell","end":1502237735759,"id":"2726a7","kernel":"python3"}
{"exec_count":16,"start":1502237895781,"input":"# output table in markdown format\n# print(tabulate.tabulate(daily_stats, daily_stats.columns, tablefmt='pipe'))","state":"done","pos":7,"cell_type":"code","type":"cell","end":1502237895812,"id":"fab125","kernel":"python3"}
{"output":{"0":{"data":{"image/png":"7739636acd4d773249cdcc9eb5b0c2aa0bd4d0c4"}}},"exec_count":17,"start":1502237895824,"input":"for rfd in wpa.raw_file_data:\n    vname = rfd['village_name']\n    diffed = resampled_data[vname]\n    daily = diffed.groupby(diffed.index.date).sum()\n    daily.plot()","state":"done","pos":8,"cell_type":"code","type":"cell","end":1502237898759,"id":"2c2f76","kernel":"python3"}
{"output":{"0":{"data":{"text/html":"<div>\n<style>\n    .dataframe thead tr:only-child th {\n        text-align: right;\n    }\n\n    .dataframe thead th {\n        text-align: left;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>days observed</th>\n      <th>max kWh per day</th>\n      <th>mean kWh per day</th>\n      <th>median kWh per day</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>ajau</th>\n      <td>129.0</td>\n      <td>797.0</td>\n      <td>600.387597</td>\n      <td>609.0</td>\n    </tr>\n    <tr>\n      <th>asei</th>\n      <td>78.0</td>\n      <td>229.0</td>\n      <td>180.038462</td>\n      <td>186.0</td>\n    </tr>\n    <tr>\n      <th>atamali</th>\n      <td>110.0</td>\n      <td>26.0</td>\n      <td>15.054545</td>\n      <td>16.0</td>\n    </tr>\n    <tr>\n      <th>ayapo</th>\n      <td>117.0</td>\n      <td>149.0</td>\n      <td>84.982906</td>\n      <td>95.0</td>\n    </tr>\n    <tr>\n      <th>kensio</th>\n      <td>98.0</td>\n      <td>24.0</td>\n      <td>5.316327</td>\n      <td>1.5</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"exec_count":14}},"exec_count":14,"start":1502237891164,"input":"# create a table of summary statistics\ntmp_dict = {}\nfor rfd in wpa.raw_file_data:\n    vname = rfd['village_name']\n    diffed = resampled_data[vname]\n    daily = diffed.groupby(diffed.index.date).sum()\n    #print(vname, daily.mean(), daily.median())\n    tmp_dict[vname] = {'mean kWh per day':daily.mean(),\n                       'median kWh per day':daily.median(),\n                       'max kWh per day':daily.max(),\n                       'days observed':daily.count()}\ndaily_stats = pd.DataFrame(tmp_dict).T\ndaily_stats","state":"done","pos":5,"cell_type":"code","type":"cell","end":1502237893480,"id":"b7894e","kernel":"python3"}
{"type":"cell","id":"6c75b9","pos":9,"input":"","cell_type":"code"}